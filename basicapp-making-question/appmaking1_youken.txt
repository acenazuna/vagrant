https://bookers-level1.herokuapp.com/books/132553
と同等の機能を備えたサイトを作成する。

【機能】
読んだ本のタイトルと、その本についての感想を投稿・編集・削除ができること
画面は下記の4つを作成すること
アプリケーショントップ画面
これまで「blogs」などディレクトリ名がトップ画面でしたが（例:http://localhost:3000/blogs/ ）、
トップ画面を「/」（例:http://localhost:3000/ ）で表示できるようにしましょう。
「/」はルートディレクトリといいます。
ルートディレクトリへのルーティング設定が必要になりますので、調べて実装してみましょう。
　→ config/routes.rbファイルを編集します。
    root to: 'home#index'
（例えば、検索キーワード「ルーティング ルート 設定 rails」など）
	投稿一覧画面：投稿された本の感想を一覧表示する画面（一覧表示はIDの若い順に表示する）
️	表形式で一覧表示するために、「tableタグ」を検索して、使ってみましょう！
	投稿詳細画面：投稿された本の感想を個別に表示する画面
	投稿編集画面：投稿された本の感想を編集できる画面
	新規投稿後と編集後は、本の詳細画面に遷移すること
ルートパスを設定すること
投稿・更新成功後、サクセスメッセージを表示すること。
サクセスメッセージには、「successfully」をという文言を含めること。
【レイアウト / デザイン】
新規投稿フォームと投稿一覧表示を同一のページ内に置くこと
投稿一覧表示にtableタグを用いること
各画面に遷移するリンクに下記のクラス名（HTMLのクラス名）を指定すること

クラス名			設定箇所			タグ	結果
"show_#{id}"	詳細ボタンのリンク	<%= link_to "リンク名", リンクのパス, class: "この部分" %> 


#
# 超おおまかな開発の流れ
#
1.要件定義 OK
2.詳細設計
3.開発
  トップページ
  投稿一覧画面
  投稿詳細画面
  投稿編集画面
4.テスト+検証

作成の流れ
Bookers

OK 1.rails new bookers
  と入力して、アプリケーションの雛形を作成

OK 2.rails g model Book title:string body:text
  と入力して、DBのモデルを作成する。
  rails db:migrate
  と入力して、反映すること

OK 3.rails g controller bookers top index show edit
  と入力して、コントローラとviewを作成

OK 4.config/routes.rbに
  resources :books と記入する。

OK 5.config/routes.rbファイルを編集します。
    root to: 'home#top'

OK 5-2.トップページの表示
   http://localhost:3000/

ほぼOK 6.トップページの作成。
  一覧リンクはとりあえず#にしておく。

OK 7.railsコンソールで3件位投稿を書いて保存する。

OK 8.index画面で投稿一覧を観れるようにする。
　show,edit,destroy、createリンクは切っておく
　ここまでが目標1

9.show画面の作成

10.index画面からshow画面、show画面からindex画面に遷移できるようにする。
   new機能の実装。この段階では、Editリンクを切っておく

11.edit画面、機能の実装。edit画面からshow画面に遷移できるようにする。
　 逆もしかり。

12.destroy機能の実装。


質問するやつ
1.topページにstrongタグ設定をしたのに、検証するとspanタグに
　なって反映されない。

2.行間とかの設定はどうするのか


